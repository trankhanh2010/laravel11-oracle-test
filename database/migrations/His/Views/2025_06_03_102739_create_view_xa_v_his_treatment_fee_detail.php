<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    protected $connection = 'oracle_his';
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        DB::statement(
            <<<SQL
CREATE OR REPLACE VIEW HIS_RS.XA_V_HIS_TREATMENT_FEE_DETAIL AS
SELECT
    treatment.id,
    treatment.is_active,
    treatment.treatment_code,
    treatment.TDL_PATIENT_NAME,
    treatment.TDL_PATIENT_CODE as PATIENT_CODE,
    treatment.fee_lock_time,
    treatment.IS_LOCK_FEE,
    treatment.TDL_HEIN_CARD_NUMBER,
    treatment.in_time,
(
SELECT NVL(SUM(TRAN.SERE_SERV_AMOUNT),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.TRANSACTION_TYPE_ID = 3 AND TRAN.SALE_TYPE_ID IS NULL AND TRAN.IS_ACTIVE = 1 --BILL
) AS TOTAL_BILL_AMOUNT,
(
SELECT NVL(SUM((TRAN.AMOUNT - NVL(TRAN.SERE_SERV_AMOUNT, 0))),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.TRANSACTION_TYPE_ID = 3 AND (TRAN.SALE_TYPE_ID IS NOT NULL OR ( TRAN.SALE_TYPE_ID IS NULL AND TRAN.AMOUNT > TRAN.SERE_SERV_AMOUNT)) AND TRAN.IS_ACTIVE = 1 --BILL
) AS TOTAL_BILL_OTHER_AMOUNT,
(
SELECT NVL(SUM(TRAN.KC_AMOUNT),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.KC_AMOUNT IS NOT NULL AND TRAN.TRANSACTION_TYPE_ID = 3 AND TRAN.SALE_TYPE_ID IS NULL AND TRAN.IS_ACTIVE = 1 --BILL
) AS TOTAL_BILL_TRANSFER_AMOUNT,
(
SELECT NVL(SUM(TRAN.EXEMPTION),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.EXEMPTION IS NOT NULL AND TRAN.TRANSACTION_TYPE_ID = 3 AND TRAN.SALE_TYPE_ID IS NULL --BILL
) AS TOTAL_BILL_EXEMPTION,
(
SELECT NVL(SUM(TRAN.TDL_BILL_FUND_AMOUNT),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.TRANSACTION_TYPE_ID = 3 AND TRAN.SALE_TYPE_ID IS NULL --BILL
) AS TOTAL_BILL_FUND,
(
SELECT NVL(SUM(TRAN.AMOUNT),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.IS_ACTIVE = 1 AND TRAN.TRANSACTION_TYPE_ID = 1 --DEPOSIT
) AS TOTAL_DEPOSIT_AMOUNT,
(
SELECT NVL(SUM(TRAN.AMOUNT),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.TRANSACTION_TYPE_ID = 2 --REPAY
) AS TOTAL_REPAY_AMOUNT,
(
SELECT NVL(SUM(SESE.VIR_TOTAL_PRICE),0)
FROM HIS_SERE_SERV SESE
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1))
) AS TOTAL_PRICE,
(
SELECT NVL(SUM(SESE.VIR_TOTAL_HEIN_PRICE),0)
FROM HIS_SERE_SERV SESE
WHERE SESE.HEIN_CARD_NUMBER IS NOT NULL AND SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1))
) AS TOTAL_HEIN_PRICE,
(
SELECT NVL(SUM(SESE.VIR_TOTAL_HEIN_PRICE),0)
FROM HIS_SERE_SERV SESE
WHERE SESE.HEIN_CARD_NUMBER IS NULL AND SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1))
) AS TOTAL_OTHER_COPAID_PRICE,
(
SELECT NVL(SUM(SESE.VIR_TOTAL_PATIENT_PRICE),0)
FROM HIS_SERE_SERV SESE
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1))
) AS TOTAL_PATIENT_PRICE,
(
SELECT NVL(SUM(SESE.DISCOUNT),0)
FROM HIS_SERE_SERV SESE
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1) AND (SESE.IS_NO_EXECUTE IS NULL OR SESE.IS_NO_EXECUTE <> 1) AND (SESE.IS_EXPEND IS NULL OR SESE.IS_EXPEND <> 1))
) AS TOTAL_DISCOUNT,
(
SELECT NVL(SUM(SESE.VIR_TOTAL_PRICE_NO_EXPEND),0)
FROM HIS_SERE_SERV SESE
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND SESE.IS_EXPEND = 1 AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1))
) AS TOTAL_PRICE_EXPEND,
(SELECT COUNT(1) FROM HIS_HEIN_APPROVAL WHERE TREATMENT_ID = treatment.id AND (IS_DELETE IS NULL OR IS_DELETE <> 1)) AS COUNT_HEIN_APPROVAL,
(SELECT NVL(SUM(TRAN.AMOUNT),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.IS_ACTIVE = 1 AND TRAN.TRANSACTION_TYPE_ID = 4 --DEBT
) AS TOTAL_DEBT_AMOUNT,
(
SELECT NVL(SUM(SESE.VIR_TOTAL_PATIENT_PRICE_BHYT),0)
FROM HIS_SERE_SERV SESE
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1) AND (SESE.IS_NO_EXECUTE IS NULL OR SESE.IS_NO_EXECUTE <> 1) AND (SESE.IS_EXPEND IS NULL OR SESE.IS_EXPEND <> 1))
) AS TOTAL_PATIENT_PRICE_BHYT,
(
SELECT SUM(NVL(SESE.OTHER_SOURCE_PRICE, 0) * SESE.AMOUNT)
FROM HIS_SERE_SERV SESE
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1) AND (SESE.IS_NO_EXECUTE IS NULL OR SESE.IS_NO_EXECUTE <> 1) AND (SESE.IS_EXPEND IS NULL OR SESE.IS_EXPEND <> 1))
) AS TOTAL_OTHER_SOURCE_PRICE,
(
SELECT MAX(T.TRANSACTION_TIME)
FROM HIS_TRANSACTION T
WHERE T.TREATMENT_ID = treatment.id AND T.IS_ACTIVE = 1 AND T.TRANSACTION_TYPE_ID = 1 AND (T.IS_CANCEL IS NULL OR T.IS_CANCEL <> 1) --DEPOSIT
) AS LAST_DEPOSIT_TIME,
(
SELECT NVL(SUM(TRAN.AMOUNT),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TREATMENT_ID = treatment.id AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.IS_ACTIVE = 1 AND TRAN.TRANSACTION_TYPE_ID = 1 AND TDL_SERE_SERV_DEPOSIT_COUNT IS NOT NULL AND TDL_SERE_SERV_DEPOSIT_COUNT > 0 --DEPOSIT
) AS TOTAL_SERVICE_DEPOSIT_AMOUNT,
(SELECT NVL(SUM(TRAN.AMOUNT - NVL(TRAN.KC_AMOUNT, 0)),0)
FROM HIS_TRANSACTION TRAN
WHERE TRAN.TRANSACTION_TYPE_ID in (3, 1) AND TRAN.SALE_TYPE_ID IS NULL AND (TRAN.IS_CANCEL IS NULL OR TRAN.IS_CANCEL <> 1) AND TRAN.TREATMENT_ID = treatment.ID AND (TRAN.IS_ACTIVE IS NULL OR TRAN.IS_ACTIVE <> 1)
) AS LOCKING_AMOUNT,

(
SELECT NVL(SUM(SESE.AMOUNT),0)
FROM HIS_SERE_SERV SESE
LEFT JOIN HIS_SERVICE SERVICE ON SESE.SERVICE_ID = SERVICE.ID
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1)) AND SERVICE.DIIM_TYPE_ID IS NOT NULL
) AS tong_so_phim,
(
SELECT NVL(SUM(SESE.AMOUNT),0)
FROM HIS_SERE_SERV SESE
LEFT JOIN HIS_SERVICE SERVICE ON SESE.SERVICE_ID = SERVICE.ID
LEFT JOIN HIS_DIIM_TYPE DIIM_TYPE ON SERVICE.DIIM_TYPE_ID = DIIM_TYPE.ID
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1)) AND DIIM_TYPE.DIIM_TYPE_CODE = 'XQ'
) AS tong_so_phim_x_quang,
(
SELECT NVL(SUM(SESE.AMOUNT),0)
FROM HIS_SERE_SERV SESE
LEFT JOIN HIS_SERVICE SERVICE ON SESE.SERVICE_ID = SERVICE.ID
LEFT JOIN HIS_DIIM_TYPE DIIM_TYPE ON SERVICE.DIIM_TYPE_ID = DIIM_TYPE.ID
WHERE SESE.TDL_TREATMENT_ID = treatment.id AND (SESE.SERVICE_REQ_ID IS NOT NULL AND (SESE.IS_DELETE IS NULL OR SESE.IS_DELETE <> 1)) AND DIIM_TYPE.DIIM_TYPE_CODE = 'MRI'
) AS tong_so_phim_mri

FROM HIS_TREATMENT treatment
SQL
        );
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        DB::statement("DROP VIEW XA_V_HIS_TREATMENT_FEE_DETAIL");
    }
};
